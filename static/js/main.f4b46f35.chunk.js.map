{"version":3,"sources":["components/HomePage/SearchResults/index.js","components/HomePage/index.js","components/Details/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","history","useHistory","displayRating","item","n","max","emptyStars","Math","ceil","stars","Number","floor","i","push","color","j","Restaurants","restaurantsList","map","key","Card","className","height","Img","variant","src","image_url","Body","style","Title","name","Text","addresses","address1","city","state","zip_code","displayAddress","location","price","prices","length","displayPrice","rating","href","phone","display_phone","Button","onClick","detailsObject","restaurantDetails","margin","Container","Row","anywhere","API_KEY","ErrorModal","Modal","size","aria-labelledby","centered","Header","closeButton","id","title","description","Footer","onHide","HomePage","useState","restaurant","setRestaurant","setLocation","setRestaurantsList","setGeoLocation","checkFilter","setCheckFilter","priceFilter","setPriceFilter","modalShow","setModalShow","modalState","setModalState","onChangePrice","event","checkbox","filter","checkedStatus","target","checked","result","forEach","index","toString","width","marginTop","marginLeft","marginRight","Col","Form","Group","controlId","Label","InputGroup","Prepend","Control","onChange","value","placeholder","Checkbox","aria-label","axios","get","headers","Authorization","then","res","data","businesses","catch","err","console","log","geo","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","show","GoogleApiWrapper","apiKey","useLocation","showingInfoWindow","setShowInfoWindow","activeMarker","setActiveMarker","setSelectedPlace","useEffect","Cuisines","categories","ImageSlide","photos","Carousel","Item","overflow","alt","backgroundPosition","mapStyle","timeConvert","time","formatedTime","match","padding","google","containerStyle","zoom","initialCenter","lat","coordinates","lng","marker","e","visible","onClose","Tabs","defaultActiveKey","Tab","eventKey","review_count","rel","url","hourList","day","hours","open","start","end","Table","striped","bordered","hover","displayHours","App","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f4b46f35.chunk.js","sourcesContent":["// The component that appears when you click 'Submit' on the main page.\r\n\r\nimport './style.css'\r\nimport React, { } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Card, Container, Row } from 'react-bootstrap'\r\nimport { IoIosStarHalf, IoIosStarOutline, IoIosStar } from 'react-icons/io'\r\nimport { FaDollarSign } from 'react-icons/fa'\r\nimport { MdLocalPhone, MdLocationOn } from 'react-icons/md'\r\n\r\nconst SearchResults = (props) => {\r\n  // For navigation when you click 'More details'\r\n  const history = useHistory()\r\n\r\n  function restaurantDetails (item) {\r\n    history.push('/yelper/details', {\r\n      // Link to /details and pass in detailsObject as a prop, which contains item\r\n      detailsObject: item\r\n    })\r\n  }\r\n\r\n  // Find whether number is float or not\r\n  function isFloat (n) {\r\n    return Number(n) === n && n % 1 !== 0\r\n  }\r\n\r\n  /* Function that takes the rating and displays that many stars.\r\n       If number is a float, round to the .5 - may not be necessary for the Yelp API.\r\n    */\r\n  const displayRating = (item) => {\r\n    const max = item\r\n    const emptyStars = 5 - Math.ceil(max)\r\n    const stars = []\r\n    if (isFloat(max)) {\r\n      // 3.2 -> push 3 full stars\r\n      const floor = Math.floor(max)\r\n      for (let i = 1; i <= floor; i++) {\r\n        stars.push(<IoIosStar color='orange' />)\r\n      }\r\n      // push a half star\r\n      stars.push(<IoIosStarHalf color='orange' />)\r\n    } else {\r\n      // If whole number, just push that many full stars\r\n      for (let i = 1; i <= max; i++) {\r\n        stars.push(<IoIosStar color='orange' />)\r\n      }\r\n    }\r\n\r\n    let j = 1\r\n    while (j <= emptyStars) {\r\n      // push remaining empty stars\r\n      stars.push(<IoIosStarOutline color='orange' />)\r\n      j++\r\n    }\r\n    return stars\r\n  }\r\n\r\n  // Take the price value and display as the dollar signs\r\n  const displayPrice = (item, key) => {\r\n    const price = item\r\n    const prices = []\r\n    if (price != null) {\r\n      prices.push(<span key={key}>Price: </span>)\r\n      for (let i = 0; i < price.length; i++) {\r\n        prices.push(<FaDollarSign color='green' />)\r\n      }\r\n    }\r\n    return prices\r\n  }\r\n\r\n  // Take the address and display it along with the icon\r\n  const displayAddress = (item, key) => {\r\n    const addresses = []\r\n    addresses.push(<MdLocationOn color='#e53935' />)\r\n    // Sometimes address1 doesn't exist, so only push it if it exists\r\n    if (item.address1 && item.address1 !== '') {\r\n      addresses.push(` ${item.address1}, `)\r\n    }\r\n    addresses.push(` ${item.city}, ${item.state} ${item.zip_code}`)\r\n    return addresses\r\n  }\r\n\r\n  // Map function to loop through the array of items and displays a card for each restaurant\r\n  // Item - restaurant\r\n  // Key - index\r\n  const Restaurants = props.restaurantsList.map((item, key) =>\r\n    <Card key={key} className='card-margin' height='300'>\r\n      <Card.Img variant='top' src={item.image_url} height='250' />\r\n      <Card.Body style={{\r\n        height: '240'\r\n      }}\r\n      >\r\n        <Card.Title>{item.name}</Card.Title>\r\n        <Card.Text>\r\n          {displayAddress(item.location)}\r\n        </Card.Text>\r\n        <Card.Text>{displayPrice(item.price, key)}</Card.Text>\r\n        <Card.Text>Rating: {displayRating(item.rating)}</Card.Text>\r\n        <Card.Text><MdLocalPhone color='#e53935' />&nbsp;<a href={`tel:${item.phone}`}>{item.display_phone}</a></Card.Text>\r\n      </Card.Body>\r\n      {/* Make sure that the button will align\r\n                to the bottom and won't cover up phone number */}\r\n      <Button\r\n        onClick={\r\n          () => {\r\n            restaurantDetails(item)\r\n          }\r\n        } variant='success' style={{\r\n          margin: '4px'\r\n        }}\r\n      >More information\r\n      </Button>\r\n    </Card>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <Container>\r\n        {/* Center row */}\r\n        <Row className='justify-content-md-center'>\r\n          {/* The cards that will display the restaurant information */}\r\n          {Restaurants}\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchResults\r\n","// The component for the home page.\n// TODO: Loading screen\n\nimport axios from 'axios'\nimport './style.css'\nimport React, { useState } from 'react'\nimport { Button, Card, Col, Container, Form, InputGroup, Modal, Row } from 'react-bootstrap'\nimport SearchResults from './SearchResults'\nimport { MdLocationCity, MdRestaurant } from 'react-icons/md'\n\n// CORS-Anywhere policy - Do not change\nconst anywhere = 'https://nameless-scrubland-76048.herokuapp.com/'\n\n// Enter your own Yelp Fusion API key here\nconst API_KEY = '0_D7bpohIZdHag_NVVAdFsxhf4uOgYuEZaMfMN5HCpHS3eMhGPMTM-sLJ1WJMEy1j3SDqCvbZ7jm8x7Adnk5sZadiOiTw5lLuvbZgU8lk7ucOdIhzbrL1Pe3KaVlXnYx'\n\n// Made only one Modal (alert box) for all alerts to increase readability\nfunction ErrorModal(props) {\n  return (\n    <Modal\n      {...props}\n      size='lg'\n      aria-labelledby='contained-modal-title-vcenter'\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id='contained-modal-title-vcenter'>\n          {props.title}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          {props.description}\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        {/* Hides Modal when close is clicked */}\n        <Button variant='danger' onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\n// Function for the homepage\nconst HomePage = (props) => {\n  // Define states\n  const [restaurant, setRestaurant] = useState('')\n  const [location, setLocation] = useState('')\n  const [restaurantsList, setRestaurantsList] = useState([])\n  const [geoLocation, setGeoLocation] = useState({})\n  const [checkFilter, setCheckFilter] = useState([1, 1, 1, 1])\n  const [priceFilter, setPriceFilter] = useState('1,2,3,4')\n  const [modalShow, setModalShow] = useState(false)\n  const [modalState, setModalState] = useState({ title: '', description: '' })\n\n  const searchRestaurant = (event) => {\n    // If restaurant and location aren't entered\n    if (restaurant.length === 0 && location.length === 0) {\n      setModalState({\n        title: 'Enter a restaurant and location',\n        description: 'Please enter both a restaurant and a location.'\n      })\n      setModalShow(true)\n      return\n    }\n    // If restaurant is entered but location isn't\n    if (location.length === 0) {\n      setModalState({\n        title: 'Enter a location',\n        description: 'Please enter a location in addition to the restaurant.'\n      })\n      setModalShow(true)\n      return\n    }\n    /* Send a GET request to the Yelp API and filter businesses to food, pass\n        in price filter and restaurant name */\n    axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&location=${location}&price=${priceFilter}`, {\n      headers: {\n        Authorization: `Bearer ${API_KEY}`\n      }\n    }).then((res) => {\n      // Show Modal if no businesses are found so the user knows something happened\n      if (res.data.businesses.length === 0) {\n        setModalState({\n          title: 'No results found',\n          description: 'No results were found. Please try a different search option.'\n        })\n        setModalShow(true)\n      } else {\n        // Set business array in restaurantsList state\n        setRestaurantsList(res.data.businesses)\n      }\n    }).catch((err) => {\n      // If there's a problem with API/CORS (429: Too Many Requests)\n      setModalState({\n        title: 'Error with API',\n        description: 'There seems to be a problem with the API. Please try again later.'\n      })\n      setModalShow(true)\n      console.log('Error occured: ', err)\n    })\n  }\n\n  // Gets user location when button is pressed\n  const searchGeoRestaurant = () => {\n    const geo = navigator.geolocation\n    if (!geo) {\n      console.log('Location API is not supported/available')\n    } else {\n      geo.getCurrentPosition((position) => {\n        // success callback\n        setGeoLocation(position.coords)\n        // Send a GET request to Yelp API containing restaurant name and user location\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&latitude=${position.coords.latitude}&longitude=${position.coords.longitude}&radius=15000&price=${priceFilter}`, {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`\n          }\n        }).then((res) => {\n          // Show Modal if no businesses are found so the user knows something happened\n          if (res.data.businesses.length === 0) {\n            setModalState({\n              title: 'No results found',\n              description: 'No results were found. Please try a different search option.'\n            })\n            setModalShow(true)\n          } else {\n            // Set business array in restaurantsList state\n            setRestaurantsList(res.data.businesses)\n          }\n        }).catch((err) => {\n          // Otherwise catch error and log it to console\n          console.log('Error occured: ', err)\n          setModalState({\n            title: 'Error with API',\n            description: 'There seems to be a problem with the API. Please try again later.'\n          })\n          setModalShow(true)\n        })\n      }, (err) => {\n        // Show error modal if location cannot be obtained\n        setModalState({\n          title: 'Cannot find user location',\n          description: 'Make sure your browser supports HTML5 Geolocation and that the Location permission is set to \\'Allow\\' for this site.'\n        })\n        setModalShow(true)\n      })\n    }\n  }\n\n  // useEffect(() => {\n  //     getLocation();\n  // }, []);\n\n  // Set the restaurant text in the restaurant state\n  const onChangeRestaurant = (event) => {\n    setRestaurant(event.target.value)\n  }\n\n  // Set the location text in the location state\n  const onChangeLocation = (event) => {\n    setLocation(event.target.value)\n  }\n\n  // Function when price filter checkboxes change\n  const onChangePrice = (event, checkbox) => {\n    const filter = checkFilter\n    // Checked = 1, unchecked = 0\n    const checkedStatus = event.target.checked ? 1 : 0\n\n    switch (checkbox) {\n      case 0:\n        filter[0] = checkedStatus\n        break\n      case 1:\n        filter[1] = checkedStatus\n        break\n      case 2:\n        filter[2] = checkedStatus\n        break\n      case 3:\n        filter[3] = checkedStatus\n        break\n      default:\n        break\n    }\n    const result = []\n    filter.forEach((item, index) => {\n      // checkbox 0 -> return price 1, checkbox 1 -> return price 2, etc\n      return item === 1 ? result.push(index + 1) : null\n    })\n\n    setCheckFilter(filter)\n    // If no checkboxes are checked, display all results\n    if (result.toString().length === 0) {\n      setPriceFilter('1,2,3,4')\n    } else {\n      setPriceFilter(result.toString()) // [2,3,4] \"2,3,4\"\n    }\n  }\n\n  return (\n    // All the stuff to display on home page\n    <div>\n      <Container>\n        <Card\n          className='justify-content-md-center' style={{\n            width: '75%',\n            marginTop: '16px',\n            marginLeft: 'auto',\n            marginRight: 'auto'\n          }}\n        >\n          <Card.Body>\n            <Row className='justify-content-md-center'>\n              <Col>\n                <h1><center>Yelper</center></h1>\n                {/* Form for entering Restaurant Name and Location */}\n                <Form>\n                  <Form.Group controlId='basic'>\n                    <Form.Label>Enter Restaurant Name/Food Style</Form.Label>\n                    {/* When Form text changes, call onChangeRestaurant() */}\n                    <InputGroup>\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id='inputGroupPrepend'><MdRestaurant /></InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <Form.Control onChange={onChangeRestaurant} placeholder='Restaurant' />\n                    </InputGroup>\n                  </Form.Group>\n\n                  <Form.Group controlId='basic'>\n                    <Form.Label>Enter Location</Form.Label>\n                    {/* When Form text changes, call onChangeLocation() */}\n                    <InputGroup>\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id='inputGroupPrepend'><MdLocationCity /></InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <Form.Control onChange={onChangeLocation} placeholder='Location (i.e. Atlanta, GA)' />\n                    </InputGroup>\n                  </Form.Group>\n                </Form>\n              </Col>\n            </Row>\n\n            <Row style={{\n              marginTop: '4px'\n            }}\n            >\n              <Col>\n                <p>Check the price range boxes to filter the search results.</p>\n                {/* Price Filters */}\n                <InputGroup className='mb-3'>\n                  <InputGroup.Prepend style={{\n                    marginRight: '16px'\n                  }}\n                  >\n                    <InputGroup.Text>\n                      $\n                    </InputGroup.Text>\n\n                    <InputGroup.Checkbox\n                      onChange={(event) => {\n                        // Call onChangePrice() for each checkbox when checked/unchecked\n                        onChangePrice(event, 0)\n                      }} aria-label='Checkbox for following text input' checked={checkFilter[0] === 1 ? 'checked' : null}\n                    />\n                  </InputGroup.Prepend>\n\n                  <InputGroup.Prepend style={{\n                    marginRight: '16px'\n                  }}\n                  >\n                    <InputGroup.Text>\n                      $$\n                    </InputGroup.Text>\n\n                    <InputGroup.Checkbox\n                      onChange={(event) => {\n                        onChangePrice(event, 1)\n                      }} aria-label='Checkbox for following text input' checked={checkFilter[1] === 1 ? 'checked' : null}\n                    />\n                    {/* <Form.Check label=\"label\" type=\"checkbox\" /> */}\n                  </InputGroup.Prepend>\n\n                  <InputGroup.Prepend style={{\n                    marginRight: '16px'\n                  }}\n                  >\n                    <InputGroup.Text>\n                      $$$\n                    </InputGroup.Text>\n\n                    <InputGroup.Checkbox\n                      onChange={(event) => {\n                        onChangePrice(event, 2)\n                      }} aria-label='Checkbox for following text input' checked={checkFilter[2] === 1 ? 'checked' : null}\n                    />\n                  </InputGroup.Prepend>\n\n                  <InputGroup.Prepend style={{\n                    marginRight: '16px'\n                  }}\n                  >\n                    <InputGroup.Text>\n                      $$$$\n                    </InputGroup.Text>\n\n                    <InputGroup.Checkbox\n                      onChange={(event) => {\n                        onChangePrice(event, 3)\n                      }} aria-label='Checkbox for following text input' checked={checkFilter[3] === 1 ? 'checked' : null}\n                    />\n                  </InputGroup.Prepend>\n                </InputGroup>\n              </Col>\n            </Row>\n\n            {/* When button is pressed, call searchRestaurant() */}\n            <Button variant='dark' onClick={searchRestaurant}>Submit</Button>\n            {/* When button is pressed, call searchGeoRestaurant() and get user location */}\n            <Button variant='dark' onClick={searchGeoRestaurant} className='float-right'>Restaurants Near Me</Button>\n          </Card.Body>\n        </Card>\n        {/* If there are restaurants, show SearchResults component, otherwise don't show anything */}\n        {restaurantsList.length > 0 ? <SearchResults restaurantsList={restaurantsList} /> : null}\n        <ErrorModal\n          title={modalState.title}\n          description={modalState.description}\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </Container>\n    </div>\n  )\n}\n\nexport default HomePage\n","// The component for the restaurant details when you click 'More information' on a specific restaurant.\r\n\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Carousel, Container, Row, Tab, Table, Tabs } from 'react-bootstrap'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { GoogleApiWrapper, InfoWindow, Marker, Map } from 'google-maps-react'\r\nimport { IoIosStarHalf, IoIosStarOutline, IoIosStar } from 'react-icons/io'\r\nimport { FaDollarSign } from 'react-icons/fa'\r\nimport { MdLocalPhone, MdLocationOn } from 'react-icons/md'\r\n\r\nconst anywhere = 'https://nameless-scrubland-76048.herokuapp.com/'\r\n\r\n// Enter your own Yelp Fusion API key here\r\nconst YELP_API_KEY = '0_D7bpohIZdHag_NVVAdFsxhf4uOgYuEZaMfMN5HCpHS3eMhGPMTM-sLJ1WJMEy1j3SDqCvbZ7jm8x7Adnk5sZadiOiTw5lLuvbZgU8lk7ucOdIhzbrL1Pe3KaVlXnYx'\r\n\r\n// Enter your own Google Maps API key here\r\nconst MAPS_API_KEY = 'AIzaSyBy6jhp6wfs-PBjNuEuLLVpuXBAIJYa7Ys'\r\n\r\nconst Details = (props) => {\r\n  // Create location object\r\n  const location = useLocation()\r\n\r\n  // Restaurant is the prop of location.state - contains the specific restaurant that was clicked on\r\n  const [restaurant, setRestaurant] = useState(location.state.detailsObject)\r\n\r\n  // Map stuff\r\n  const [showingInfoWindow, setShowInfoWindow] = useState(false) // Hides or shows the infoWindow\r\n  const [activeMarker, setActiveMarker] = useState({}) // Shows the active marker upon click\r\n  const [selectedPlace, setSelectedPlace] = useState({}) // Shows the infoWindow to the selected place upon a marker\r\n\r\n  // Execute this when site loads\r\n  useEffect(() => {\r\n    // Make a request to businesses/id to retrieve more detailed information\r\n    axios.get(`${anywhere}https://api.yelp.com/v3/businesses/${restaurant.id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${YELP_API_KEY}`\r\n      }\r\n    }).then((res) => {\r\n      // Set business array in restaurant state\r\n      setRestaurant(res.data)\r\n    }).catch((err) => {\r\n      // Otherwise catch error and log it to console\r\n      console.log('Error occured: ', err)\r\n    })\r\n  }, []) // [] is an important parameter so that it doesn't do this forever\r\n\r\n  // Map function to loop through sub-array categories to find type of cuisines\r\n  const Cuisines = restaurant.categories.map((item, key) =>\r\n    <span key={key}>{item.title}, </span>\r\n  )\r\n\r\n  // Make sure photos exist before get request\r\n  const ImageSlide = restaurant.photos && restaurant.photos.map((item, key) =>\r\n    <Carousel.Item>\r\n      <div style={{\r\n        overflow: 'hidden',\r\n        height: '400px'\r\n      }}\r\n      >\r\n        <img\r\n          className='d-block w-100'\r\n          src={item}\r\n          alt='Restaurant'\r\n          key={key}\r\n          style={{\r\n            backgroundPosition: 'center center'\r\n          }}\r\n        />\r\n      </div>\r\n    </Carousel.Item>\r\n  )\r\n\r\n  // When map marker is clicked\r\n  const onMarkerClick = (props, marker, e) => {\r\n    setSelectedPlace(props)\r\n    setActiveMarker(marker)\r\n    setShowInfoWindow(true)\r\n  }\r\n\r\n  // When map infoWindow is closed\r\n  const onClose = props => {\r\n    if (showingInfoWindow) {\r\n      setActiveMarker(null)\r\n      setShowInfoWindow(false)\r\n    }\r\n  }\r\n\r\n  // Style for map\r\n  const mapStyle = {\r\n    width: '100%',\r\n    height: '400px',\r\n    position: 'relative'\r\n  }\r\n\r\n  // Find whether number is float or not\r\n  function isFloat (n) {\r\n    return Number(n) === n && n % 1 !== 0\r\n  }\r\n\r\n  /* Function that takes the rating and displays that many stars.\r\n     If number is a float, round to the .5 - may not be necessary for the Yelp API.\r\n  */\r\n  const displayRating = () => {\r\n    const max = restaurant.rating\r\n    const emptyStars = 5 - Math.ceil(max)\r\n    const stars = []\r\n    if (isFloat(max)) {\r\n      // 3.2 -> push 3 full stars\r\n      const floor = Math.floor(max)\r\n      for (let i = 1; i <= floor; i++) {\r\n        stars.push(<IoIosStar color='orange' />)\r\n      }\r\n      // push a half star\r\n      stars.push(<IoIosStarHalf color='orange' />)\r\n    } else {\r\n      // If whole number, just push that many full stars\r\n      for (let i = 1; i <= max; i++) {\r\n        stars.push(<IoIosStar color='orange' />)\r\n      }\r\n    }\r\n\r\n    let j = 1\r\n    while (j <= emptyStars) {\r\n      // push remaining empty stars\r\n      stars.push(<IoIosStarOutline color='orange' />)\r\n      j++\r\n    }\r\n    return stars\r\n  }\r\n\r\n  // Displays open hours of restaurant\r\n  const displayHours = () => {\r\n    const hourList = []\r\n    let day = ''\r\n    // If hours exist\r\n    if (restaurant.hours && restaurant.hours[0].open) {\r\n      const hours = restaurant.hours[0].open // all the hours\r\n      // Filter if hours are there\r\n      if ((hours.filter(item => item.day === 0)).length > 0) {\r\n        // checking the day\r\n        day = hours.filter(item => item.day === 0)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        // Else the business is closed on that day\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 1)).length > 0) {\r\n        day = hours.filter(item => item.day === 1)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 2)).length > 0) {\r\n        day = hours.filter(item => item.day === 2)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 3)).length > 0) {\r\n        day = hours.filter(item => item.day === 3)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 4)).length > 0) {\r\n        day = hours.filter(item => item.day === 4)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 5)).length > 0) {\r\n        day = hours.filter(item => item.day === 5)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n      if ((hours.filter(item => item.day === 6)).length > 0) {\r\n        day = hours.filter(item => item.day === 6)\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}\r\n            >Closed\r\n            </td>\r\n          </tr>\r\n        )\r\n      }\r\n    }\r\n    return (\r\n      // Display this all in a table\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Day</th>\r\n            <th>Hours</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {hourList} {/* The resulting array of all hours */}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n\r\n  const timeConvert = (time) => {\r\n    // Check correct time format and split into components\r\n    time = time.toString().match(/^([01]\\d|2[0-3])([0-5]\\d)/)\r\n    let formatedTime = ''\r\n    if (time.length > 1) { // If time format correct\r\n      formatedTime = (time[1] % 12 || 12) + ':' + time[2] + (time[1] < 12 ? ' AM' : ' PM')\r\n    }\r\n    return formatedTime // return adjusted time or original string\r\n  }\r\n\r\n  // Take the price value and display as the dollar signs\r\n  const displayPrice = () => {\r\n    const price = restaurant.price\r\n    const prices = []\r\n    if (price != null) {\r\n      prices.push(<span>Price: </span>)\r\n      for (let i = 0; i < price.length; i++) {\r\n        prices.push(<FaDollarSign color='green' />)\r\n      }\r\n    }\r\n    return prices\r\n  }\r\n\r\n  // Actual return of Details component\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {/* Restaurant Images */}\r\n        <Row className='justify-content-md-center'>\r\n          <Card style={{\r\n            width: '100%'\r\n          }}\r\n          >\r\n            <Card.Body style={{\r\n              padding: '0.5rem'\r\n            }}\r\n            >\r\n              <Carousel>{ImageSlide}</Carousel>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n        <br />\r\n\r\n        {/* Google Maps */}\r\n        <Row className='justify-content-md-center'>\r\n          <Card style={{\r\n            width: '100%'\r\n          }}\r\n          >\r\n            <Card.Header>\r\n              <center><h1>{restaurant.name}</h1></center>\r\n            </Card.Header>\r\n            <Card.Body style={{\r\n              padding: '0rem'\r\n            }}\r\n            >\r\n              {/* Display Map */}\r\n              <Map\r\n                google={props.google}\r\n                style={mapStyle}\r\n                containerStyle={mapStyle}\r\n                zoom={20}\r\n                initialCenter={{\r\n                  lat: restaurant.coordinates.latitude,\r\n                  lng: restaurant.coordinates.longitude\r\n                }}\r\n              >\r\n                {/* Marker for map */}\r\n                <Marker\r\n                  title={`${restaurant.name}`} // mouse over\r\n                  name={`${restaurant.name}`}\r\n                  onClick={onMarkerClick}\r\n                  position={{ lat: restaurant.coordinates.latitude, lng: restaurant.coordinates.longitude }}\r\n                />\r\n\r\n                {/* Info Window for when marker is clicked */}\r\n                <InfoWindow\r\n                  marker={activeMarker}\r\n                  visible={showingInfoWindow}\r\n                  onClose={onClose}\r\n                >\r\n                  <h4>{restaurant.name}</h4>\r\n                </InfoWindow>\r\n              </Map>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n\r\n        {/* Restaurant Details */}\r\n        <Row style={{\r\n          marginTop: '16px'\r\n        }}\r\n        >\r\n          <Card style={{\r\n            width: '100%'\r\n          }}\r\n          >\r\n            <Card.Header>Restaurant Details</Card.Header>\r\n            <Card.Body>\r\n              {/* Different tabs for different information */}\r\n              <Tabs defaultActiveKey='general' id='uncontrolled-tab-example'>\r\n                {/* General */}\r\n                <Tab\r\n                  style={{\r\n                    padding: '16px'\r\n                  }} eventKey='general' title='General'\r\n                >\r\n                  <p>Cuisines: {Cuisines}</p>\r\n                  <p>{displayPrice()}</p>\r\n                  <p>Rating: {displayRating()} {restaurant.review_count} reviews</p>\r\n                  <a variant='outline-primary' target='_blank' rel='noopener noreferrer' href={restaurant.url}><Button variant='outline-primary'>Yelp Link</Button></a>\r\n                </Tab>\r\n\r\n                {/* Address/Contact */}\r\n                <Tab\r\n                  style={{\r\n                    padding: '16px'\r\n                  }} eventKey='address' title='Address/Contact'\r\n                >\r\n                  {/* If it doesn't have address1, don't display the comma */}\r\n                  <p><MdLocationOn color='#e53935' /> {restaurant.location.address1 !== '' ? `${restaurant.location.address1}, ${restaurant.location.city}, ${restaurant.location.state} ${restaurant.location.zip_code}` : `${restaurant.location.city}, ${restaurant.location.state} ${restaurant.location.zip_code}`}</p>\r\n                  <p><MdLocalPhone color='#e53935' /> <a href={`tel:${restaurant.phone}`}>{restaurant.display_phone}</a></p>\r\n                </Tab>\r\n\r\n                {/* Open Hours */}\r\n                <Tab\r\n                  style={{\r\n                    padding: '16px'\r\n                  }} eventKey='hours' title='Open Hours'\r\n                >\r\n                  <p>{displayHours()}</p>\r\n                </Tab>\r\n              </Tabs>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: `${MAPS_API_KEY}`\r\n})(Details)\r\n","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport HomePage from './components/HomePage'\nimport Details from './components/Details'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App () {\n  return (\n  // Define the path and what component to use at the path using routes\n    <Router>\n      <Switch>\n        <Route path='/yelper/details'>\n          <Details />\n        </Route>\n\n        <Route path='/yelper'>\n          <HomePage />\n        </Route>\n\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}